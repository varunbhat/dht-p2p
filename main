#!/usr/bin/env python
import hashlib

from ProtocolHandler import ProtocolHandler
from asyncsocket import AsyncNode
import logging
import argparse
import ConfigParser

from chord import Chord

logging.basicConfig(level=logging.DEBUG, format='[%(asctime)-15s %(levelname)s] %(message)s')
config = ConfigParser.RawConfigParser()
config.read('node.cfg')
protocol = ProtocolHandler()


def arguement_parser():
    parser = argparse.ArgumentParser(description='Create a socket server')
    parser.add_argument('-p', "--port", type=int, help='Port Number to use for the server', required=True)
    args = parser.parse_args()
    return args


def read_config():
    cfg = type('obj', (object,), {})
    cfg.bs_address = protocol.format_addresses([config.get('bootstrap', 'address').split(':')])
    cfg.username = config.get('node', 'username')
    return cfg


node = AsyncNode()
args = arguement_parser()
CONFIG = read_config()
chord = Chord(node.get_address(), 64000)


@node.on('message')
def echoMessage(data, sock, address):
    response = protocol.parse_response(data)
    if response is not None:
        node.startevent(response['type'], response)

    print data


@node.on('join_request_generate')
def send_join_requests(clientlist):
    join_list = chord.generate_finger_table(clientlist)
    for addr in join_list:
        node.send_data(addr,protocol.join_request(node.get_address()))


@node.on('register')
def bootstrap_registration(data, *args, **kwargs):
    global NODE_ID
    response = protocol.parse_response(data)
    # If Registraton failed, De register and Re register
    if response['error_code'] == 9998:
        node.send_data(CONFIG.bs_address, protocol.deregister_ip_request(node.get_address(), 'ALPHA'))
        node.send_data(CONFIG.bs_address, protocol.register_request(node.get_address(), 'ALPHA'), event='register',
                       retry_count=1)
        return

    # Get all members from the server
    response = protocol.parse_response(
        node.send_data(CONFIG.bs_address, protocol.list_all(CONFIG.username), no_thread=True))
    clientlist = response['clients']
    node.startevent('join_request_generate', clientlist)


@node.on('start')
def bootstrap_registration():
    # Create node ID
    logging.debug('Using sha1 node id:%d' % (chord.get_nodeid()))
    # Register with Bootstrap server
    node.send_data(CONFIG.bs_address, protocol.register_request(node.get_address(), CONFIG.username), event='register')


if __name__ == '__main__':
    node.start(port=args.port)
