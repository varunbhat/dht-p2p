#!/usr/bin/env python
import ConfigParser
import argparse
import json
import logging
import random
import socket
import time

import re
from ProtocolHandler import ProtocolHandler
from asyncsocket import AsyncNode
from chord import Chord


def arguement_parser():
    parser = argparse.ArgumentParser(description='Create a socket server')
    parser.add_argument('-p', "--port", type=int, help='Port Number to use for the server', required=True)
    parser.add_argument('-f', "--file_count", type=int, help='Number of files in the initial list', required=False)
    args = parser.parse_args()
    return args


args = arguement_parser()

# logging.basicConfig(filename='%s_%d_server.log' % (socket.gethostname(),args.port), level=logging.DEBUG, format='[%(asctime)-15s %(levelname)s %(threadName)s] %(message)s')
logging.basicConfig(level=logging.DEBUG, format='[%(asctime)-15s %(levelname)s %(threadName)s] %(message)s')

config = ConfigParser.RawConfigParser()
config.read('node.cfg')
protocol = ProtocolHandler()
initial_resource_list = 'initial_resources.txt'
add_resource_list = 'add_resources.txt'
secondary_list = 'second_list.txt'


def read_config():
    cfg = type('obj', (object,), {})
    cfg.bs_address = protocol.format_addresses([config.get('bootstrap', 'address').split(':')])
    cfg.username = config.get('node', 'username')
    return cfg


def read_resource_txt(filename):
    data = open(filename, 'r').read().replace('\r', '').split('\n')
    search_list = []
    for index in range(len(data)):
        if len(data[index]) > 0 and data[index][0] != '#':
            search_list.append(data[index])

    return search_list


def format_filename(file_list):
    filem = []
    for filex in file_list:
        filem.append('_'.join(re.findall('[A-Za-z0-9_]+', filex)))
    return filem


def select_random_files(file_list, length):
    selected_files = []
    for i in range(length):
        selected_files.append(file_list.pop(int(random.random() * 1000) % len(file_list)))

    return selected_files


node = AsyncNode(address=(socket.gethostbyname(socket.gethostname()), args.port))
CONFIG = read_config()
chord = Chord(node.get_address(), 2 ** (4 * 4))


@node.on('sync_serv')
def sync_serv(*args, **kwargs):
    counter = 0
    while not node.stop_flag:
        time.sleep(1)
        counter += 1
        filemap = chord.get_peer_filemap()
        keys = []
        for addr, (key, filename) in filemap:
            if not chord.in_range(key):
                add_files(key, filename, addr)
                keys.append(key)
        for i in keys:
            chord.peer_file_del(i)


ser_req = None


@node.on('handler')
def handler(data, sock, *args, **kwargs):
    global ser_req, msg_count
    try:
        if data != '' or data is not None:
            data = json.loads(data)
    except ValueError:
        return

    if data['command'] == 'sync_req':
        if sock is None:
            logging.debug('Socket malfunction')
        node.send_data(None, json.dumps({'message': 'sync_resp', 'clients': chord.node_addressmap.values()}), sock=sock,
                       silent=True)

    if data.get('command') is not None:
        if data.get('command') == 'EXITALL':
            node.stop()
        elif data.get('command') == 'STARTSEARCH':
            # node.send_data(tuple(data['SERVERINFO']), time.time(), 0, protocol.search_request(node.get_address(), chord.generate_file_id(data['QUERY'])))
            key = chord.generate_file_id(data['QUERY'])
            node.send_data(chord.get_max_dist_address(key),
                           protocol.search_request(time.time(), 0, node.get_address(), key))
            ser_req = tuple(data['SERVERINFO'])
        elif data.get('command') == 'PICKRESOURCES':
            files = select_random_files(read_resource_txt(secondary_list), data['num_entries'])
            data = [(node.get_address(), (chord.generate_file_id(filex), filex)) for filex in files]
            for addr, (key, filename) in data:
                chord.peer_file_add(key, filename, addr)
        elif data.get('command') == "NUM_MESSAGES":
            ser_req = tuple(data['SERVERINFO'])
            node.send_data(ser_req, json.dumps({'msg_count': msg_count, 'type': 'MESSAGE'}))
            msg_count = 0


msg_count = 0


@node.on('message')
def echoMessage(data, sock=None, address=None, *args, **kwargs):
    global msg_count
    response = protocol.parse_response(data)
    if response is not None:
        msg_count += 1
        return node.startevent(response['type'], response, sock)
    node.startevent('handler', data, sock)


@node.on('ADD')
def add_request(request, sock):
    if not request['is_response']:
        key, filename = request['keymap']
        key = int(key)

        if chord.in_range(key):
            chord.peer_file_add(key, filename, request['clients'])
            # node.send_data(request['clients'], protocol.add_response(0))
            node.send_data(None, protocol.add_response(chord.get_nodeid()), sock=sock)
        else:
            resp = node.send_data(chord.get_max_dist_address(key),
                                  protocol.add_request(request['clients'], (key, filename)), no_thread=True)
            if resp is not None:
                node.send_data(None, resp, sock=sock)


@node.on('SER')
def search(request, sock):
    global ser_req
    if request['is_response']:
        print 'Response Received:', request['details']
        if ser_req:
            node.send_data(ser_req, json.dumps(request), no_thread=True)
        return
    key = int(request['key'])
    details = []

    for addr, (id, filename) in chord.get_peer_filemap():
        print id,key
        if id == key:
            details.append((addr, filename))

    if len(details) > 0:
        node.send_data(request['address'],
                       protocol.search_response(int(request['hops']) + 1, request['starttime'], time.time(),
                                                details))
    else:
        if chord.in_range(key):
            node.send_data(request['address'],
                           protocol.search_response(int(request['hops']) + 1, request['starttime'], time.time(),
                                                    []))
        else:
            node.send_data(chord.get_max_dist_address(key),
                           protocol.search_request(request['starttime'], int(request['hops']) + 1,
                                                   request['address'],
                                                   key))


@node.on('UPFIN')
def join_request(request, sock):
    if not request['is_response']:
        # resp = node.send_data(CONFIG.bs_address, protocol.list_all(CONFIG.username), silent=True, no_thread=True)
        # resp = protocol.parse_response(resp)

        if request['clients'] != node.get_address():
            if not request['is_leaving']:
                # logging.debug('Adding Client to the network')
                chord.add_node(request['clients'])
            else:
                # logging.debug('Deleting Client to the network')
                chord.delete_node(request['clients'])

            node.send_data(None, protocol.update_finger_response(0), sock=sock)


@node.on('GIVEKY')
def add_deregistered_keys(request, sock):
    if not request['is_response']:
        for addr, (key, filename) in request['addr_keymap']:
            chord.peer_file_add(int(key), filename, addr)


@node.on('GETKY')
def get_file_keys(request, sock):
    if request['is_response']:
        for addr, (key, filename) in request['addr_keymap']:
            chord.peer_file_add(key, filename, addr)

    logging.debug('Getkey request received')

    # Successor Node and the present node are the same. so dont do anything
    if request['key'] != chord.get_nodeid():
        node_req_files = chord.get_predecessor_keys(int(request['key']))
        logging.debug('Files returned for the new predecessor Node: %s' % (str(node_req_files)))
        node.send_data(None, protocol.get_key_response(node_req_files), sock=sock, no_thread=True)
        # chord.peer_file_del(int(request['key']))
    else:
        node.send_data(None, protocol.get_key_response([]), sock=sock)


def add_files(key, filemap, addr):
    resp = None
    logging.debug('Adding files to the network')
    while resp == None or not (resp.get('type') == 'ADD' and int(resp.get('error_code')) > 0):
        resp = node.send_data(chord.get_max_dist_address(key),
                              protocol.add_request(addr, (key, filemap)),
                              no_thread=True)
        resp = protocol.parse_response(resp)
    logging.debug('Addkey Response Received: filename:%s key:%s' % (filemap, key))


@node.on('GET')
def get_response(response, *args, **kwargs):
    # logging.debug('Initializing Chord with clients: %s' % (str(response['clients'])))
    chord.initialize_range(response['clients'])

    # Get the successor
    if chord.get_successor() != node.get_address():
        # Send Join and update finger table to the successor
        logging.debug('Sending UPFIN to successor %s' % (str(chord.get_successor())))
        for addr in response['clients']:
            node.send_data(addr, protocol.update_finger_request(protocol.JOIN, node.get_address(), chord.get_nodeid()),
                           no_thread=True, silent=True)

        logging.debug('Sending Get key request to successor.')
        resp = node.send_data(chord.get_successor(), protocol.get_key_request(chord.get_nodeid()), no_thread=True)
        logging.debug('Received Get key Response from successor. %s' % (resp))
        resp = protocol.parse_response(resp)
        # logging.debug('Getkey Files Received: %s' % (resp['keymap']))

        if resp != None:
            for addr, (key, filename) in resp['addr_keymap']:
                chord.peer_file_add(int(key), filename, addr)

        for key, filemap in chord.get_node_filemap().iteritems():
            logging.debug('Added File %s(%s) to Node' % (filemap, key))
            chord.peer_file_add(key, filemap, node.get_address())


@node.on('REG')
def register_details(response, sock, *args, **kwargs):
    if response['error_code'] == 9998:
        logging.debug('Re-registering with Bootstrap server: %s' % (str(CONFIG.bs_address)))
        node.send_data(CONFIG.bs_address, protocol.deregister_ip_request(node.get_address(), 'ALPHA'),
                       no_thread=True)
        node.send_data(CONFIG.bs_address, protocol.register_request(node.get_address(), 'ALPHA'),
                       event='message',
                       retry_count=kwargs.get('retry_count') + 1 if kwargs.get('retry_count') is not None else 1)
    else:
        node.send_data(CONFIG.bs_address, protocol.list_all(CONFIG.username), event='message', silent=True)


@node.on('register')
def bootstrap_registration(response=None, sock=None):
    # if Response is Not received, event has just started, send the request.
    if response is None:
        logging.debug('Registering with Bootstrap server:%d' % (chord.get_nodeid()))
        return node.send_data(CONFIG.bs_address, protocol.register_request(node.get_address(), CONFIG.username),
                              event='message')


@node.on('start')
def bootstrap_registration():
    # Create node ID
    logging.debug('Using sha1 node id:%d' % (chord.get_nodeid()))

    # Register with the Bootstrap server
    node.startevent('register')

    # read the list of files from the initial list
    node_file_list = format_filename(
        select_random_files(read_resource_txt(initial_resource_list), args.file_count or 7))

    # Initialize the files and store in the node List
    chord.initialize_files(node_file_list)
    node.startevent('sync_serv')


@node.on('loop')
def monitor_commands():
    ip, port = node.get_address()
    input_read = raw_input('%s@%s:%d %s> ' % (CONFIG.username, ip, port, chord.get_nodeid()))
    input_read = input_read.lower()

    try:
        if input_read == 'details':
            print 'IP     :', node.get_address()
            print 'KEY    :', chord.get_nodeid()
        elif input_read == 'fingertable':
            ft = chord.get_finger_table()
            ids = ft.keys()
            ids.sort()

            disp_len = len(str(max(ids)))

            for key in ids:
                print 'ID: ', str(2 ** key + chord.get_nodeid()).zfill(disp_len), 'Addr:', ft[key]
            print 'Predecessor:', chord.get_predecessor()
            print 'Successor  :', chord.get_successor()
            print 'Span       :', chord.get_span()
        elif input_read == 'entries':
            if len(chord.get_node_filemap()) > 0:
                for key, name in chord.get_node_filemap().iteritems():
                    print str(key), ':', name
            else:
                print 'Empty'
        elif input_read == 'keytable':
            files = chord.get_peer_filemap()
            if len(files) > 0:
                for addr, (key, filename) in files:
                    print str(key), ':', (addr, filename)
            else:
                print 'Empty'
        elif input_read == 'clients':
            for key, val in chord.node_addressmap.iteritems():
                print key, ': ', val
        elif input_read == 'range':
            print 'Span       :', chord.get_span()
        elif input_read == 'exit':
            node.stop()
            return
        elif input_read == 'add':
            files = select_random_files(read_resource_txt(secondary_list), 7)
            chord.initialize_files(files)
            data = [(node.get_address(), (chord.generate_file_id(filex), filex)) for filex in files]
            for addr, (key, filename) in data:
                chord.peer_file_add(key, filename, addr)
        elif 'addkey' in input_read:
            filename = input_read.split(' ')[1]
            chord.initialize_files([filename])
            key = chord.generate_file_id(filename)
            chord.peer_file_add(key, filename, node.get_address())
        elif len(re.findall(r'search *([a-z0-9A-Z_]+.*)?', input_read)) > 0:
            data = re.findall(r'([a-z0-9A-Z_]+) +(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}) +(\d+)?', input_read)
            if len(data) > 0:
                key, ip, port = data[0]
                node.send_data((ip, int(port)), protocol.search_request(time.time(), 0, node.get_address(), key))
        elif input_read == 'exitall':
            for client in chord.clientlist:
                node.send_data(client, json.dumps({'command': 'EXITALL'}),no_thread=True)
            node.send_data(client, protocol.deregister_all(CONFIG.username),no_thread=True)
            node.stop()
            return
        elif input_read == 'help':
            print 'details\n' \
                  'fingertable\n' \
                  'entries\n' \
                  'keytable\n' \
                  'clients\n' \
                  'range\n' \
                  'exit\n' \
                  'add\n' \
                  'search <key> <sourceip> <sourceport>\n' \
                  'exitall\n'
    except Exception, e:
        print e
        pass


@node.on('stop')
def deregister():
    values = chord.get_peer_filemap()
    for addr in chord.node_addressmap.values():
        if addr != node.get_address():
            node.send_data(addr, protocol.update_finger_request(protocol.LEAVE, node.address, chord.get_nodeid()),
                           silent=True)
    node.send_data(chord.get_successor(), protocol.give_key_request(values), no_thread=True)
    node.send_data(CONFIG.bs_address, protocol.deregister_ip_request(node.address, CONFIG.username))


if __name__ == '__main__':
    node.start(ip=socket.gethostbyname(socket.gethostname()), port=args.port)
