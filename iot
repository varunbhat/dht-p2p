#!/usr/bin/env python

import argparse
import asyncio
import configparser
import json
import logging
import socket

import aiocoap
import aiocoap.resource as resource
import re
from aiocoap.message import Message
from aiocoap.protocol import Context
from chord import Chord


def arguement_parser():
    parser = argparse.ArgumentParser(description='Create a socket server')
    parser.add_argument('-p', "--port", type=int, help='Port Number to use for the server', required=True)
    parser.add_argument('-f', "--file_count", type=int, help='Number of files in the initial list', required=False)
    args = parser.parse_args()
    return args


config = configparser.RawConfigParser()
config.read('node.cfg')


def read_config():
    cfg = type('obj', (object,), {})
    ip, port = config.get('bootstrap', 'address').split(':')
    cfg.bs_address = (ip, int(port))
    return cfg


args = arguement_parser()
CONFIG = read_config()
chord = Chord()


class AreaRouter(resource.Resource):
    def __init__(self):
        super(AreaRouter, self).__init__()
        self.chord = Chord()
        self.chord.set_nodeid('%s:%d' % (socket.gethostbyname(socket.gethostname()), args.port or 3000))
        self.sensor_chord = Chord()
        self.sensor_chord.set_nodeid('%s:%d' % (socket.gethostbyname(socket.gethostname()), args.port or 3000))
        self.sl = []

    @asyncio.coroutine
    def service_discovery(self, address, key):
        logging.debug('Service Discovery Query')
        context = yield from Context.create_client_context()
        request = Message(code=aiocoap.GET)
        print(address)
        request.opt.uri_host = address[0]
        request.opt.uri_port = address[1]
        request.opt.uri_path = ('.well-known', 'core')
        resp = yield from context.request(request).response
        # todo: store the value in the dht about the type of messages
        routers = re.findall(r'<([a-zA-Z\.0-9_\-/]+)>', resp.payload.decode('utf8'))
        ip, port = address
        for val in routers:
            v = val.split('/')
            if val.split('/')[1] == 'sensors':
                addre = 'coap://%s:%s%s' % (ip, port, val)
                self.sl.append(addre)
                self.sensor_chord.peer_file_add(self.sensor_chord.generate_key(v[-1]), v[-1], addre)

    @asyncio.coroutine
    def render_put(self, request):
        payload = json.loads(request.payload.decode('utf8'))
        print(payload)
        logging.debug('Area Router Query')
        if payload.get('area'):
            if self.chord.in_range(int(payload['area'])) or self.chord.finger_table:
                asyncio.get_event_loop().create_task(self.service_discovery(payload['source'], payload['area']))
                return aiocoap.Message(code=aiocoap.CREATED)
            else:
                context = yield from Context.create_client_context()
                request = Message(code=aiocoap.PUT, payload=request.payload)
                request.opt.uri_host = self.chord.get_max_dist_address(payload['search'])
                resp = yield from context.request(request).response
                return aiocoap.Message(code=resp.code, payload=resp.payload)
        return aiocoap.Message(code=aiocoap.BAD_REQUEST)

    def render_get(self, request):
        payload = json.loads(request.payload.decode('utf8'))
        key = self.sensor_chord.generate_key(payload['sensor'])
        res = []
        for i in self.sl:
            if key in i:
                res.append(i)
        return aiocoap.Message(code=aiocoap.CONTENT, payload=json.dumps({'result': res}).encode('utf8'))


class DefaultRouter(resource.Resource):
    def __init__(self):
        super(DefaultRouter, self).__init__()


@asyncio.coroutine
def add_node():
    logging.debug('Sending Put Request to the bootstrap server')
    context = yield from Context.create_client_context()
    request = Message(code=aiocoap.PUT)
    request.opt.uri_host = CONFIG.bs_address[0]
    request.opt.uri_port = CONFIG.bs_address[1]
    request.opt.uri_path = ('query',)
    request.opt.uri_query = ('key=%s' % (chord.generate_key('Bangalore')), 'port=%s' % (args.port or 3000))
    # request.set_request_uri('coap://localhost/register')
    response = yield from context.request(request).response
    print('Result: %s\n%r' % (response.code, response.payload))


# logging setup

logging.basicConfig(level=logging.DEBUG)
logging.getLogger("coap-server").setLevel(logging.DEBUG)


def main():
    # Resource tree creation
    root = resource.Site()
    root.add_resource(('.well-known', 'core'), resource.WKCResource(root.get_resources_as_linkheader))
    # root.add_resource(('sensor', 'location'), DefaultRouter())
    root.add_resource(('boostrap', 'areaindex'), DefaultRouter())
    root.add_resource(('sensor', 'areaindex'), DefaultRouter())
    root.add_resource(('sensor', 'temperature'), DefaultRouter())
    root.add_resource(('sensor', 'humidity'), DefaultRouter())
    root.add_resource(('node', 'register'), AreaRouter())
    logging.debug('Starting at port %s' % (args.port or 3000))
    asyncio.async(aiocoap.Context.create_server_context(root, bind=('', args.port or 3000)))

    loop = asyncio.get_event_loop()
    loop.create_task(add_node())

    loop.run_forever()

if __name__ == "__main__":
    main()
